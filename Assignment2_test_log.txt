 This is a a copy of test results for assignment 2 -R Programming Course

 It is included as a reference 

                                           Brendan Madigan

Test case 1 - a 2 * 2 matrix with attributes with a normal distribution
Test case 2 - a 10 * 10  matrix with attributes with a normal distribution
Test case 3 - a singular matrix  1ie a square matrix that does not have a matrix inverse
              a 2 * 2 matrix with each element set 1 
              Thus returns an error - whichis expected as a singularmatrix doesn't have an inverse

------------------------------------------------------------------------
Test case 1 - a 2 * 2 matrix with attributes with a normal distribution
------------------------------------------------------------------------
> mat5 <- matrix(rnorm(4), 2)
> mat5
           [,1]      [,2]
[1,] -0.1987941 0.7651771
[2,]  1.5671162 1.4443451
> dd <<- makeCacheMatrix(mat5)
> dd
$set
function (y) 
{
    x <<- y
    m <<- NULL
}
<environment: 0x0000000008da11e0>

$get
function () 
x
<environment: 0x0000000008da11e0>

$setinverse
function (solve) 
m <<- solve
<environment: 0x0000000008da11e0>

$getinverse
function () 
m
<environment: 0x0000000008da11e0>

> zzz <<- cacheSolve(dd)
> zzz
           [,1]      [,2]
[1,] -0.9718057 0.5148379
[2,]  1.0544105 0.1337556
> 
------------------------------------------------------------------------
Test case 2 - a 10 * 10 matrix with attributes with a normal distribution
------------------------------------------------------------------------
> mat5 <- matrix(rnorm(100), 10) 
  mat5 
           [,1]        [,2]        [,3]        [,4]       [,5]       [,6] 
 [1,] -0.1987941  2.01043746 -0.97423807 -1.18988199  0.1284710 -0.2422243 
 [2,]  1.5671162 -0.23586167  0.31387000  0.68193573 -0.6981643 -1.0957047 
 [3,]  0.7651771  0.05261645  0.92532639  0.31900835  0.2256985 -1.2549229 
 [4,]  1.4443451  1.61597675 -1.74813693  0.63565837  0.2569920  0.3949134 
 [5,] -1.0359896 -0.24636893 -0.01550729 -0.53892280  0.2306586  0.3960466 
 [6,]  0.7822600  1.56009498 -0.82206350  0.02248082  1.2418760  0.6653314 
 [7,] -1.8696125 -2.28495531 -0.59762291 -0.56098085  1.9193562  0.4797766 
 [8,] -3.2182123 -0.90762612 -0.94915870 -2.30538353  0.7250396  0.1706245 
 [9,] -0.4430693  0.18100078  0.21136292 -0.18668470 -0.2235691  0.5316309 
[10,]  0.4977037 -0.79422845 -0.31507117 -0.17059767 -0.1754400 -0.9531892 
            [,7]       [,8]        [,9]      [,10] 
 [1,]  0.35537357 -0.7542835  1.70536101  1.1547757 
 [2,]  0.02800903 -0.2561324  0.42977525  1.8039416 
 [3,]  0.93006048 -0.3971482  0.50667120  0.6312169 
 [4,] -0.03743987 -1.7536801  0.72850710  2.3291687 
 [5,]  1.35973249  0.9481451 -0.64794804  1.2410560 
 [6,]  0.64365804 -2.4164904  0.35030026 -1.4841845 
 [7,]  0.27085406 -0.5141453 -0.03921677  0.1622387 
 [8,] -0.74632323 -0.6135893 -0.01728766 -0.8199658 
 [9,]  0.50651099 -0.4311551  1.51514608 -1.3970840 
[10,]  0.03951225 -1.4702975 -2.23143509 -0.8846068 
> dd <<- makeCacheMatrix(mat5) 
> dd 
$set 
function (y)  
{ 
     x <<- y 
     m <<- NULL 
} 
<environment: 0x00000000095eae90> 
 
$get 
function ()  
x 
<environment: 0x00000000095eae90> 
 
$setinverse 
function (solve)  
<<- solve 
<environment: 0x00000000095eae90> 
 
$getinverse 
function ()  
m 
<environment: 0x00000000095eae90> 
 
zzz <<- cacheSolve(dd) 
zzz 
            [,1]       [,2]        [,3]        [,4]        [,5]       [,6] 
 [1,]  0.5398786  1.4475217 -1.22630867 -1.02334107  0.14247945  0.8470344 
 [2,] -0.1545654 -0.6648277  0.55474194  0.34405914 -0.03882741 -0.1089392 
 [3,] -1.4078036  1.7701657  0.10314948 -0.38065198  0.72854627  1.4633937 
 [4,] -0.2996070 -2.2733546  1.41956094  1.34108354 -0.59359602 -1.4157490 
 [5,]  0.2612400 -0.1086068  0.04319963 -0.29999208 -0.20011580  0.2687258 
 [6,] -0.8390046  1.7318379 -0.89808356 -0.42985616  0.77144665  1.2969287 
 [7,]  0.4189918 -0.5240721  0.13167742  0.08073366  0.19623315 -0.3840143 
 [8,]  0.9183865 -0.7312996 -0.27150985 -0.27688887 -0.33312635 -0.6006830 
 [9,]  0.3335207 -0.0476000 -0.04208222 -0.04233429 -0.24894764 -0.2128772 
[10,] -0.4950755  0.6868414  0.02392931  0.08556862  0.36887033  0.3936353 
             [,7]       [,8]        [,9]        [,10] 
 [1,]  0.28316979 -0.3551995 -0.40789652 -0.108737094 
 [2,] -0.36016652  0.1709977 -0.15202641 -0.111933377 
 [3,] -0.94278054  1.3635762 -0.53798751 -1.176932137 
 [4,]  0.08346501 -0.3634799  0.60527814  0.455781754 
 [5,]  0.34617062 -0.2172145 -0.57245326 -0.202200779 
 [6,] -0.45901640  0.7261533 -0.22906339 -0.825410801 
 [7,]  0.27717829 -0.5223798  0.47910201  0.482753113 
 [8,]  0.52680655 -0.8807627 -0.07559358  0.357646421 
 [9,]  0.26268619 -0.2359033  0.29281782  0.009108768 
[10,] -0.29751874  0.5273330 -0.24935279 -0.426185908 
   

------------------------------------------------------------------------
Test case 3 - a 10 * 10 matrix with attributes with a normal distribution
------------------------------------------------------------------------
> mat5 <- matrix(c(1,1,1,1),2)
> mat5
     [,1] [,2]
[1,]    1    1
[2,]    1    1
> dd <<- makeCacheMatrix(mat5)
> dd
$set
function (y) 
{
    x <<- y
    m <<- NULL
}
<environment: 0x0000000009e45bb0>

$get
function () 
x
<environment: 0x0000000009e45bb0>

$setinverse
function (solve) 
m <<- solve
<environment: 0x0000000009e45bb0>

$getinverse
function () 
m
<environment: 0x0000000009e45bb0>

> zzz <<- cacheSolve(dd)
 Show Traceback
 
 Rerun with Debug
 Error in solve.default(data, ...) : 
  Lapack routine dgesv: system is exactly singular: U[2,2] = 0 
> 